</div>
</div>
</body>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        loadUserPreferences();

        // Não usar ScrollTrigger/ScrollSmoother: animations triggered by IntersectionObserver ou handlers leves
        gsap.registerPlugin(ScrollToPlugin);

        // Utilitário: observer que executa callback ao entrar (uma vez)
        function createInViewObserver(cb, options = {}) {
            if (typeof IntersectionObserver === 'undefined') {
                return {
                    observe(el) { try { cb(el); } catch (e) { console.error(e); } },
                    unobserve() {}
                };
            }

            const observer = new IntersectionObserver((entries, obs) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        try { cb(entry.target); } catch (e) { console.error(e); }
                        if (!options.keep) obs.unobserve(entry.target);
                    }
                });
            }, options);
            return observer;
        }

        // Utilitário leve para mapear progressão do elemento no viewport e chamar update(progress)
        function createScrollMapper(selector, update) {
            const el = document.querySelector(selector);
            if (!el) return;
            function tick() {
                const rect = el.getBoundingClientRect();
                const windowH = window.innerHeight || document.documentElement.clientHeight;
                const progress = 1 - Math.max(0, Math.min(1, (rect.top + rect.height) / (windowH + rect.height)));
                update(progress, el);
            }
            let ticking = false;
            window.addEventListener('scroll', () => {
                if (!ticking) {
                    requestAnimationFrame(() => { tick(); ticking = false; });
                    ticking = true;
                }
            }, { passive: true });
            // initial
            tick();
        }

        // Parallax leve sem ScrollTrigger
        createScrollMapper('#paralax-background', (progress, el) => {
            const y = (-50) * progress; // -50px a -50% dependendo do design; mantemos -50 para efeito
            el.style.transform = `translateY(${y}px)`;
        });

        // Header: alternar cor de fundo quando houver scroll (simplificado)
        (function() {
            const header = document.getElementById('header');
            if (!header) return;
            let lastState = false;
            function check() {
                const scrolled = window.scrollY > 0;
                if (scrolled !== lastState) {
                    lastState = scrolled;
                    gsap.to(header, { backgroundColor: scrolled ? 'var(--mat-sys-surface)' : 'transparent', duration: 0.4, ease: 'power1.out' });
                }
            }
            window.addEventListener('scroll', () => { requestAnimationFrame(check); }, { passive: true });
            check();
        })();

        // Mapear scale/opacity do #inicio conforme o elemento se move na viewport
        createScrollMapper('#inicio', (progress, el) => {
            const scale = 1 + (1 * progress); // 1 -> 2
            const opacity = 1 - progress;     // 1 -> 0
            el.style.transform = `scale(${scale})`;
            el.style.opacity = opacity;
        });

        createScrollMapper('#vantagens-calltitle', (progress, el) => {
            el.style.opacity = Math.max(0, 1 - progress * 1.2);
        });

        // Animar #advantage-title ao entrar em view (sem dependência de ScrollTrigger)
        createInViewObserver((el) => {
            gsap.fromTo(el, { opacity: 0, y: 16 }, { opacity: 1, y: 0, duration: 0.6, ease: 'power1.out' });
        }, { rootMargin: '0px 0px -20% 0px' }).observe(document.getElementById('advantage-title'));

        // Reproduzir animação de listagem quando entrar em view
        (function() {
            const container = document.getElementById('vantagens-list');
            if (!container) return;
            const obs = createInViewObserver(() => {
                const tl = gsap.timeline();
                tl.from('.slideFromTop', { opacity: 0, y: -20, duration: 0.6, ease: 'power1.out', stagger: { amount: 0.6, from: 'end' } });
            }, { rootMargin: '0px 0px -25% 0px' });
            obs.observe(container);
        })();

        (function() {
            const container = document.getElementById('vantagens-list2');
            if (!container) return;
            const obs = createInViewObserver(() => {
                const tl2 = gsap.timeline();
                tl2.from('.slideFromBottom', { opacity: 0, y: 20, duration: 0.6, ease: 'power1.out', stagger: { amount: 0.6, from: 'end' } });
            }, { rootMargin: '0px 0px -25% 0px' });
            obs.observe(container);
        })();

        createInViewObserver((el) => {
            gsap.fromTo('#freelancers-modal', { opacity: 0, y: 20, scale: 0.98 }, { opacity: 1, y: 0, scale: 1, duration: 0.6, ease: 'power1.out' });
        }, { rootMargin: '0px 0px -20% 0px' }).observe(document.getElementById('freelancers'));

        createInViewObserver(() => {
            gsap.fromTo('#prod-connect-desk', { opacity: 0, x: 20 }, { opacity: 1, x: 0, duration: 0.6, ease: 'power1.out' });
        }, { rootMargin: '0px 0px -20% 0px' }).observe(document.getElementById('prod-connect-desk'));

        createInViewObserver(() => {
            gsap.fromTo('#prod-connect-schools', { opacity: 0, x: 20 }, { opacity: 1, x: 0, duration: 0.6, ease: 'power1.out' });
        }, { rootMargin: '0px 0px -20% 0px' }).observe(document.getElementById('prod-connect-schools'));

        const rotateStart = "top 20%";
        const rotateEnd = "bottom 60%";

        // Timeline morphRotate: reproduz quando o container entra em view (não pin/scrub)
        (function() {
            const container = document.getElementById('morphRotateContainer');
            if (!container) return;
            const obs = createInViewObserver(() => {
                const tl3 = gsap.timeline();
                tl3.to('#morphRotate', { borderRadius: '50%', rotation: 360, ease: 'none', duration: 1 }, 0);
                tl3.to('.antiRotate', { rotation: -360, ease: 'none', duration: 1 }, 0);
                tl3.fromTo('.show1', { opacity: 1 }, { opacity: 0, ease: 'none' }, 0);
                tl3.fromTo('.show2', { opacity: 0 }, { opacity: 1, ease: 'none' }, 0.33);
                tl3.fromTo('.show3', { opacity: 0 }, { opacity: 1, ease: 'none' }, 0.66);
            }, { rootMargin: '0px 0px -30% 0px' });
            obs.observe(container);
        })();


        if (window.innerWidth <= 640) {
            document.querySelectorAll('.card-comment').forEach(card => {
                // Animação simples on-enter para dispositivos móveis (sem scrub)
                createInViewObserver((el) => {
                    gsap.to(el, { scale: 1.05, duration: 0.35, ease: 'power1.out' });
                    setTimeout(() => gsap.to(el, { scale: 1, duration: 0.35, ease: 'power1.out' }), 600);
                }, { rootMargin: '0px 0px -20% 0px' }).observe(card);
            });
        }

        
        // Banner timeline: play quando o canvas entrar em view
        (function() {
            const canvas = document.getElementById('bannerCanvas');
            if (!canvas) return;
            const obs = createInViewObserver(() => {
                const bannerTl = gsap.timeline();
                bannerTl.fromTo('#meetConnectDeskTitle', { scale: 1, transformOrigin: '50% 50%' }, { scale: 100, transformOrigin: '50% 50%', ease: 'none', duration: 1 }, 0);
                bannerTl.fromTo('#meetConnectDeskModal', { opacity: 0, y: 100, zIndex: 100 }, { opacity: 1, y: 0, zIndex: 100, ease: 'none', duration: 0.3 }, 0.5);
                bannerTl.fromTo('#meetConnectDeskBackground', { scale: 0, transformOrigin: '50% 50%' }, { scale: 1, transformOrigin: '50% 50%', ease: 'none' }, 0);
            }, { rootMargin: '0px 0px -40% 0px' });
            obs.observe(canvas);
        })();

        
        ///primeira animação, escalonando o item até 100x o tamanho dele iniciando em 0 e concluíndo em 30% da timelin
        bannerTl.fromTo(
            "#meetConnectDeskTitle",
            {
                scale: 1, // 1000%
                transformOrigin: "50% 50%",
                ease: "none",
                force3D: true
            },

            {
                scale: 100,
                transformOrigin: "50% 50%",
                ease: "none",
                force3D: true
            },
            0 
        );


        ///segunda animação, escalonando o item para o tamnho real iniciando em 15% e concluíndo em 40% da timeline
        bannerTl.fromTo(
            "#meetConnectDeskModal",
            { opacity: 0, y: 100, zIndex: 100, force3D: true },
            { opacity: 1, y: 0, zIndex: 100, ease: "none", duration: 0.3, force3D: true },
            0.5 
        );

        ///terceira animação, deslizando de baixo para cima o item iniciando em 50% e concluíndo em 80% da timeline
        bannerTl.fromTo(
            "#meetConnectDeskBackground",
            {
                scale: 0, // 1000%
                transformOrigin: "50% 50%",
                ease: "none"
            },
            {
                scale: 1,
                transformOrigin: "50% 50%",
                ease: "none"
            },
            0
        );



        const backTop = document.getElementById('backTop');
        if (backTop) {
            backTop.addEventListener('click', function (e) {
                e.preventDefault();
                gsap.to(window, { duration: 1, scrollTo: { y: 0 }, ease: "power2.out" });
            });
        }

        document.querySelectorAll('a[href^="#"]').forEach(link => {
            link.addEventListener('click', function (e) {
                const targetId = this.getAttribute('href').replace('#', '');
                const target = document.getElementById(targetId);
                if (target) {
                    e.preventDefault();
                    gsap.to(window, {
                        duration: 1,
                        scrollTo: { y: target, offsetY: 0 },
                        ease: "power2.out"
                    });
                }
            });
        });


        // Removido ScrollTrigger.refresh() — não usamos mais ScrollTrigger
    });
</script>